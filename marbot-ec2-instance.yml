---
# Copyright 2018-2020 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'marbot.io: EC2 instance monitoring (https://github.com/marbot-io/monitoring-jump-start)'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'marbot endpoint'
      Parameters:
      - EndpointId
      - Stage
    - Label:
        default: 'EC2'
      Parameters:
      - InstanceId
    - Label:
        default: 'Thresholds'
      Parameters:
      - CPUUtilizationThreshold
      - CPUCreditBalanceThreshold
      - EBSIOCreditBalanceThreshold
      - EBSThroughputCreditBalanceThreshold
      - NetworkUtilizationThreshold
Parameters:
  EndpointId:
    Description: 'Your marbot endpoint ID (to get this value: select a Slack channel where marbot belongs to and send a message like this: "@marbot show me my endpoint id").'
    Type: String
  Stage:
    Description: 'marbot stage (never change this!).'
    Type: String
    Default: v1
    AllowedValues: [v1, dev]
  InstanceId:
    Description: 'The instance ID of the EC2 instance that you want to monitor.'
    Type: 'AWS::EC2::Instance::Id'
  CPUUtilizationThreshold:
    Description: 'The maximum percentage of CPU utilization (set to -1 to disable).'
    Type: Number
    Default: 80
    MinValue: -1
    MaxValue: 100
  CPUCreditBalanceThreshold:
    Description: 'The minimum number of CPU credits available (t* instances only; set to -1 to disable).'
    Type: Number
    Default: 20
    MinValue: -1
  EBSIOCreditBalanceThreshold:
    Description: 'The minimum percentage of I/O credits remaining in the burst bucket (smaller instance only; set to -1 to disable).'
    Type: Number
    Default: 20
    MinValue: -1
    MaxValue: 100
  EBSThroughputCreditBalanceThreshold:
    Description: 'The minimum percentage of throughput credits remaining in the burst bucket (smaller instance only; set to -1 to disable).'
    Type: Number
    Default: 20
    MinValue: -1
    MaxValue: 100
  NetworkUtilizationThreshold:
    Description: 'The maximum percentage of network utilization (set to -1 to disable).'
    Type: Number
    Default: 80
    MinValue: -1
    MaxValue: 100
Conditions:
  HasCPUUtilizationThreshold: !Not [!Equals [!Ref CPUUtilizationThreshold, '-1']]
  HasCPUCreditBalanceThreshold: !Not [!Equals [!Ref CPUCreditBalanceThreshold, '-1']]
  HasEBSIOCreditBalanceThreshold: !Not [!Equals [!Ref EBSIOCreditBalanceThreshold, '-1']]
  HasEBSThroughputCreditBalanceThreshold: !Not [!Equals [!Ref EBSThroughputCreditBalanceThreshold, '-1']]
  HasNetworkUtilizationThreshold: !Not [!Equals [!Ref NetworkUtilizationThreshold, '-1']]
Resources:
  ##########################################################################
  #                                                                        #
  #                                 TOPIC                                  #
  #                                                                        #
  ##########################################################################
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service: 'events.amazonaws.com' # Allow CloudWatch Events
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic
  TopicEndpointSubscription:
    DependsOn: TopicPolicy
    Type: 'AWS::SNS::Subscription'
    Properties:
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 1
          maxDelayTarget: 60
          numRetries: 100
          numNoDelayRetries: 0
          backoffFunction: exponential
        throttlePolicy:
          maxReceivesPerSecond: 1
      Endpoint: !Sub 'https://api.marbot.io/${Stage}/endpoint/${EndpointId}'
      Protocol: https
      TopicArn: !Ref Topic
  MonitoringJumpStartEvent:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Monitoring Jump Start connection. (created by marbot)'
      ScheduleExpression: 'rate(30 days)'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
        Input: !Sub |
          {
            "Type": "monitoring-jump-start-connection",
            "StackTemplate": "marbot-ec2-instance",
            "StackVersion": "2.2.0",
            "Partition": "${AWS::Partition}",
            "AccountId": "${AWS::AccountId}",
            "Region": "${AWS::Region}",
            "StackId": "${AWS::StackId}",
            "StackName": "${AWS::StackName}"
          }
  ##########################################################################
  #                                                                        #
  #                                 ALARMS                                 #
  #                                                                        #
  ##########################################################################
  CPUUtilizationTooHighAlarm:
    Condition: HasCPUUtilizationThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average CPU utilization over last 10 minutes too high. (created by marbot)'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: InstanceId
        Value: !Ref InstanceId
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: 'AWS/EC2'
      OKActions:
      - !Ref Topic
      Period: 600
      Statistic: Average
      Threshold: !Ref CPUUtilizationThreshold
      TreatMissingData: notBreaching
  CPUCreditBalanceTooLowAlarm:
    Condition: HasCPUCreditBalanceThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average CPU credit balance over last 10 minutes too low, expect a significant performance drop soon. (created by marbot)'
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: InstanceId
        Value: !Ref InstanceId
      EvaluationPeriods: 1
      MetricName: CPUCreditBalance
      Namespace: 'AWS/EC2'
      OKActions:
      - !Ref Topic
      Period: 600
      Statistic: Average
      Threshold: !Ref CPUCreditBalanceThreshold
      TreatMissingData: notBreaching
  EBSIOCreditBalanceTooLowAlarm:
    Condition: HasEBSIOCreditBalanceThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average EBS IO credit balance over last 10 minutes too low, expect a significant performance drop soon. (created by marbot)'
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: InstanceId
        Value: !Ref InstanceId
      EvaluationPeriods: 1
      MetricName: 'EBSIOBalance%'
      Namespace: 'AWS/EC2'
      OKActions:
      - !Ref Topic
      Period: 600
      Statistic: Average
      Threshold: !Ref EBSIOCreditBalanceThreshold
      TreatMissingData: notBreaching
  EBSThroughputCreditBalanceTooLowAlarm:
    Condition: HasEBSThroughputCreditBalanceThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average EBS throughput credit balance over last 10 minutes too low, expect a significant performance drop soon. (created by marbot)'
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: InstanceId
        Value: !Ref InstanceId
      EvaluationPeriods: 1
      MetricName: 'EBSByteBalance%'
      Namespace: 'AWS/EC2'
      OKActions:
      - !Ref Topic
      Period: 600
      Statistic: Average
      Threshold: !Ref EBSThroughputCreditBalanceThreshold
      TreatMissingData: notBreaching
  StatusCheckFailedAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'EC2 instance status check or the system status check has failed. (created by marbot)'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: InstanceId
        Value: !Ref InstanceId
      EvaluationPeriods: 1
      MetricName: StatusCheckFailed
      Namespace: 'AWS/EC2'
      OKActions:
      - !Ref Topic
      Period: 600
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  NetworkBurstUtilizationTooHighAlarm:
    Condition: HasNetworkUtilizationThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average Network In+Out burst utilization over last 10 minutes too high, expect a significant performance drop soon. (created by marbot)'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
      - Id: 'in'
        Label: 'In'
        MetricStat:
          Metric:
            Namespace: 'AWS/EC2'
            MetricName: NetworkIn # bytes per minute
            Dimensions:
            - Name: InstanceId
              Value: !Ref InstanceId
          Period: 600
          Stat: Average
          Unit: Bytes
        ReturnData: false
      - Id: 'out'
        Label: 'Out'
        MetricStat:
          Metric:
            Namespace: 'AWS/EC2'
            MetricName: NetworkOut # bytes per minute
            Dimensions:
            - Name: InstanceId
              Value: !Ref InstanceId
          Period: 600
          Stat: Average
          Unit: Bytes
        ReturnData: false
      - Expression: '(in+out)/60*8/1000/1000/1000' # to Gbit/s
        Id: 'inout'
        Label: 'In+Out'
        ReturnData: true
      OKActions:
      - !Ref Topic
      Threshold: !GetAtt 'InstanceDetails.NetworkBurst' # in Gbit/s
      TreatMissingData: notBreaching
  NetworkBaselineUtilizationTooHighAlarm:
    Condition: HasNetworkUtilizationThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average Network In+Out baseline utilization over last 10 minutes too high, you might can burst. (created by marbot)'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
      - Id: in
        Label: In
        MetricStat:
          Metric:
            Namespace: 'AWS/EC2'
            MetricName: NetworkIn # bytes per minute
            Dimensions:
            - Name: InstanceId
              Value: !Ref InstanceId
          Period: 600
          Stat: Average
          Unit: Bytes
        ReturnData: false
      - Id: out
        Label: Out
        MetricStat:
          Metric:
            Namespace: 'AWS/EC2'
            MetricName: NetworkOut # bytes per minute
            Dimensions:
            - Name: InstanceId
              Value: !Ref InstanceId
          Period: 600
          Stat: Average
          Unit: Bytes
        ReturnData: false
      - Expression: '(in+out)/60*8/1000/1000/1000' # to Gbit/s
        Id: inout
        Label: 'In+Out'
        ReturnData: true
      OKActions:
      - !Ref Topic
      Threshold: !GetAtt 'InstanceDetails.NetworkBaseline' # in Gbit/s
      TreatMissingData: notBreaching
  NetworkUtilizationTooHighAlarm:
    Condition: HasNetworkUtilizationThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average Network In+Out utilization over last 10 minutes too high. (created by marbot)'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
      - Id: in
        Label: In
        MetricStat:
          Metric:
            Namespace: 'AWS/EC2'
            MetricName: NetworkIn # bytes out per minute
            Dimensions:
            - Name: InstanceId
              Value: !Ref InstanceId
          Period: 600
          Stat: Average
          Unit: Bytes
        ReturnData: false
      - Id: out
        Label: Out
        MetricStat:
          Metric:
            Namespace: 'AWS/EC2'
            MetricName: NetworkOut # bytes out per minute
            Dimensions:
            - Name: InstanceId
              Value: !Ref InstanceId
          Period: 600
          Stat: Average
          Unit: Bytes
        ReturnData: false
      - Expression: '(in+out)/60*8/1000/1000/1000' # to Gbit/s
        Id: inout
        Label: 'In+Out'
        ReturnData: true
      OKActions:
      - !Ref Topic
      Threshold: !GetAtt 'InstanceDetails.NetworkMaximum' # in Gbit/s
      TreatMissingData: notBreaching
  InstanceDetails:
    Type: 'Custom::InstanceDetails'
    DependsOn: LambdaPolicy
    Version: '1.0'
    Properties:
      InstanceId: !Ref InstanceId
      NetworkUtilizationThreshold: !Ref NetworkUtilizationThreshold
      ServiceToken: !GetAtt 'LambdaFunction.Arn'
  ##########################################################################
  #                                                                        #
  #                            CUSTOM RESOURCES                            #
  #                                                                        #
  ##########################################################################
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ec2
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'ec2:DescribeInstances'
            Resource: '*'
  LambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'LambdaLogGroup.Arn'
      PolicyName: lambda
      Roles:
      - !Ref LambdaRole
  LambdaFunction: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const https = require('https');
          const AWS = require('aws-sdk');
          const response = require('cfn-response');
          const ec2 = new AWS.EC2({apiVersion: '2016-11-15'});
          function getData(cb) {
            https.get('https://s3-eu-west-1.amazonaws.com/monitoring-jump-start/data/network.json', (res) => {
              if (res.statusCode === 200) {
                const chunks = [];
                res.on('data', (chunk) => chunks.push(chunk));
                res.on('end', () => {
                  const body = Buffer.concat(chunks);
                  const json = body.toString('utf8');
                  const data = JSON.parse(json);
                  cb(null, data);
                });
                } else {
                  cb(new Error(`unexpeczted status code: ${res.statusCode}`));
                }
            }).on('error', (err) => {
              cb(err);
            });
          }
          function format(n, networkUtilizationThreshold) {
            if (n === undefined) {
              return 99;
            }
            return Math.round(n * networkUtilizationThreshold) / 100;
          }
          exports.handler = (event, context) => {
            console.log(`Invoke: ${JSON.stringify(event)}`);
            if (event.RequestType === 'Delete') {
              response.send(event, context, response.SUCCESS, {});
            } else if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              getData((err, networkData) => {
                if (err) {
                  console.log(`Error: ${JSON.stringify(err)}`);
                  response.send(event, context, response.FAILED, {});
                } else {
                  ec2.describeInstances({
                    InstanceIds: [event.ResourceProperties.InstanceId]
                  }, (err, instanceData) => {
                    if (err) {
                      console.log(`Error: ${JSON.stringify(err)}`);
                      response.send(event, context, response.FAILED, {});
                    } else {
                      const instance = instanceData.Reservations[0].Instances[0];
                      console.log(`Instance data: ${JSON.stringify(instance)}`);
                      const network = networkData[instance.InstanceType];
                      let networkMaximum = undefined;
                      let networkBurst = undefined;
                      let networkBaseline = undefined;
                      if (network !== undefined) {
                        if (network.baseline !== undefined && network.burst !== undefined) {
                          networkBaseline = network.baseline;
                          networkBurst = network.burst;
                        } else if (network.baseline !== undefined) {
                          networkMaximum = network.baseline;
                        }
                      } else {
                        console.log(`No network data found for instance #${event.ResourceProperties.InstanceId} of type ${instance.InstanceType}`);
                      }
                      response.send(event, context, response.SUCCESS, {
                        InstanceType: instance.InstanceType,
                        NetworkMaximum: format(networkMaximum, event.ResourceProperties.NetworkUtilizationThreshold), // in Gbit/s
                        NetworkBurst: format(networkBurst, event.ResourceProperties.NetworkUtilizationThreshold), // in Gbit/s
                        NetworkBaseline: format(networkBaseline, event.ResourceProperties.NetworkUtilizationThreshold) // in Gbit/s
                      }, event.ResourceProperties.InstanceId);
                    }
                  });
                }
              });
            } else {
              cb(new Error(`unsupported RequestType: ${event.RequestType}`));
            }
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'nodejs12.x'
      Timeout: 60
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: 14
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  StackTemplate:
    Description: 'Stack template.'
    Value: 'marbot-ec2-instance'
  StackVersion:
    Description: 'Stack version.'
    Value: '2.3.0'
