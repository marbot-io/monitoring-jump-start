---
# Copyright widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'marbot.io: VPC interface endpoint monitoring (https://github.com/marbot-io/monitoring-jump-start)'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'marbot endpoint'
      Parameters:
      - EndpointId
      - Stage
    - Label:
        default: 'VPC interface endpoint'
      Parameters:
      - VPCEndpointId
    - Label:
        default: 'Thresholds'
      Parameters:
      - PacketsDroppedThreshold
      - RstPacketsReceivedThreshold
      - BandwidthUtilizationThreshold
Parameters:
  EndpointId:
    Description: 'Your marbot endpoint ID (to get this value: select a channel where marbot belongs to and send a message like this: "@marbot show me my endpoint id").'
    Type: String
  Stage:
    Description: 'marbot stage (never change this!).'
    Type: String
    Default: v1
    AllowedValues: [v1, dev]
  VPCEndpointId:
    Description: 'The VPC interface endpoint ID that you want to monitor.'
    Type: String
  PacketsDroppedThreshold:
    Description: 'The maximum number of dropped packets (set to -1 to disable).'
    Type: Number
    Default: 0
    MinValue: -1
  RstPacketsReceivedThreshold:
    Description: 'The maximum number of RST packets received (set to -1 to disable).'
    Type: Number
    Default: 0
    MinValue: -1
  BandwidthUtilizationThreshold:
    Description: 'The maximum percentage of bandwidth utilization (set to -1 to disable).'
    Type: Number
    Default: 80
    MinValue: -1
    MaxValue: 100
Conditions:
  HasPacketsDroppedThreshold: !Not [!Equals [!Ref PacketsDroppedThreshold, '-1']]
  HasRstPacketsReceivedThreshold: !Not [!Equals [!Ref RstPacketsReceivedThreshold, '-1']]
  HasBandwidthUtilizationThreshold: !Not [!Equals [!Ref BandwidthUtilizationThreshold, '-1']]
Resources:
  ##########################################################################
  #                                                                        #
  #                                 TOPIC                                  #
  #                                                                        #
  ##########################################################################
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service: 'events.amazonaws.com' # Allow EventBridge
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic
  TopicEndpointSubscription:
    DependsOn: TopicPolicy
    Type: 'AWS::SNS::Subscription'
    Properties:
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 1
          maxDelayTarget: 60
          numRetries: 100
          numNoDelayRetries: 0
          backoffFunction: exponential
        throttlePolicy:
          maxReceivesPerSecond: 1
      Endpoint: !Sub 'https://api.marbot.io/${Stage}/endpoint/${EndpointId}'
      Protocol: https
      TopicArn: !Ref Topic
  MonitoringJumpStartEvent:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Monitoring Jump Start connection. (created by marbot)'
      ScheduleExpression: 'rate(30 days)'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
        Input: !Sub |
          {
            "Type": "monitoring-jump-start-connection",
            "StackTemplate": "marbot-interface-endpoint",
            "StackVersion": "1.0.0",
            "Partition": "${AWS::Partition}",
            "AccountId": "${AWS::AccountId}",
            "Region": "${AWS::Region}",
            "StackId": "${AWS::StackId}",
            "StackName": "${AWS::StackName}"
          }
  ##########################################################################
  #                                                                        #
  #                                 ALARMS                                 #
  #                                                                        #
  ##########################################################################
  PacketsDroppedTooHighAlarm:
    Condition: HasPacketsDroppedThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Dropped packets over last 10 minutes too high. Increasing values could indicate that the endpoint or endpoint service is unhealthy. (created by marbot)'
      Namespace: 'AWS/PrivateLinkEndpoints'
      MetricName: PacketsDropped
      Statistic: Sum
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref PacketsDroppedThreshold
      TreatMissingData: notBreaching
      Dimensions:
      - Name: 'Endpoint Type'
        Value: Interface
      - Name: 'Service Name'
        Value: !GetAtt 'EndpointDetails.ServiceName'
      - Name: 'VPC Endpoint Id'
        Value: !Ref VPCEndpointId
      - Name: 'VPC Id'
        Value: !GetAtt 'EndpointDetails.VpcId'
  RstPacketsReceivedTooHighAlarm:
    Condition: HasRstPacketsReceivedThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'RST packets received over last 10 minutes too high. Increasing values could indicate that the endpoint service is unhealthy.'
      Namespace: 'AWS/PrivateLinkEndpoints'
      MetricName: RstPacketsReceived
      Statistic: Sum
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref RstPacketsReceivedThreshold
      TreatMissingData: notBreaching
      Dimensions:
      - Name: 'Endpoint Type'
        Value: Interface
      - Name: 'Service Name'
        Value: !GetAtt 'EndpointDetails.ServiceName'
      - Name: 'VPC Endpoint Id'
        Value: !Ref VPCEndpointId
      - Name: 'VPC Id'
        Value: !GetAtt 'EndpointDetails.VpcId'
  BandwidthUtilizationTooHighAlarm:
    Condition: HasBandwidthUtilizationThreshold
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Bandwidth utilization too high. (created by marbot)'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
      - Id: bytesProcessed
        Label: BytesProcessed
        MetricStat:
          Metric:
            Namespace: 'AWS/PrivateLinkEndpoints'
            MetricName: BytesProcessed # bytes per minute
            Dimensions:
            - Name: 'Endpoint Type'
              Value: Interface
            - Name: 'Service Name'
              Value: !GetAtt 'EndpointDetails.ServiceName'
            - Name: 'VPC Endpoint Id'
              Value: !Ref VPCEndpointId
            - Name: 'VPC Id'
              Value: !GetAtt 'EndpointDetails.VpcId'
          Period: 60
          Stat: Sum
        ReturnData: false
      - Expression: 'bytesProcessed/60*8/1000/1000/1000' # to Gbit/s
        Id: 'bandwidth'
        Label: 'Bandwidth'
        ReturnData: false
      - Expression: 'bandwidth/100*100' # hard limit is 100 Gbit/s
        Id: 'utilization'
        Label: 'Utilization'
        ReturnData: true
      Threshold: !Ref BandwidthUtilizationThreshold
      TreatMissingData: notBreaching
  EndpointDetails:
    Type: 'Custom::EndpointDetails'
    DependsOn: LambdaPolicy
    Version: '1.0'
    Properties:
      EndpointId: !Ref VPCEndpointId
      ServiceToken: !GetAtt 'LambdaFunction.Arn'
  ##########################################################################
  #                                                                        #
  #                            CUSTOM RESOURCES                            #
  #                                                                        #
  ##########################################################################
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ec2
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'ec2:DescribeVpcEndpoints'
            Resource: '*'
  LambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'LambdaLogGroup.Arn'
      PolicyName: lambda
      Roles:
      - !Ref LambdaRole
  LambdaFunction: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const AWS = require('aws-sdk');
          const response = require('cfn-response');
          const ec2 = new AWS.EC2({apiVersion: '2016-11-15'});
          exports.handler = (event, context) => {
            console.log(`Invoke: ${JSON.stringify(event)}`);
            if (event.RequestType === 'Delete') {
              response.send(event, context, response.SUCCESS, {});
            } else if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              ec2.describeVpcEndpoints({
                VpcEndpointIds: [event.ResourceProperties.EndpointId]
              }, (err, data) => {
                if (err) {
                  console.log(`Error: ${JSON.stringify(err)}`);
                  response.send(event, context, response.FAILED, {});
                } else {
                  response.send(event, context, response.SUCCESS, {
                    ServiceName: data.VpcEndpoints[0].ServiceName,
                    VpcId: data.VpcEndpoints[0].VpcId
                  }, event.ResourceProperties.EndpointId);
                }
              });
            } else {
              cb(new Error(`unsupported RequestType: ${event.RequestType}`));
            }
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'nodejs16.x'
      Timeout: 60
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: 14
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  StackTemplate:
    Description: 'Stack template.'
    Value: 'marbot-interface-endpoint'
  StackVersion:
    Description: 'Stack version.'
    Value: '1.0.0'
