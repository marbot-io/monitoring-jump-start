---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'marbot.io: AWS basics monitoring (https://github.com/marbot-io/monitoring-jump-start)'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'marbot endpoint'
      Parameters:
      - EndpointId
      - Stage
      - Test
    - Label:
        default: 'Alerts'
      Parameters:
      - BillingThreshold
      - BudgetThreshold
      - TrustedAdvisor
      - RootUserLogin
      - CloudWatchAlarmFired
      - CloudWatchAlarmOrphaned
      - CloudWatchAlarmAutoClose
      - BatchFailed
      - CodePipelineFailed
      - CodeBuildFailed
      - CodeDeployFailed
      - HealthIssue
      - AutoScalingFailed
      - GuardDutyFinding
      - EMRFailed
      - EBSFailed
      - SSMFailed
      - RDSIssue
      - GlueJobFailed
      - EC2SpotInstanceInterruption
      - ECSServiceFailed
      - MacieAlert
      - SecurityHubFinding
      - OpsWorksDeploymentFailed
      - OpsWorksCommandFailed
      - OpsWorksInstanceFailed
      - OpsWorksAlert
      - ECRIMageScanFinding
      - DLMPolicyAlert
    - Label:
        default: 'Notifications'
      Parameters:
      - CodePipelineNotifications
      - AMIUpdateNotificationECSOptimized
      - AMIUpdateNotificationAmazonLinux
      - AMIUpdateNotificationAmazonLinux2
Parameters:
  EndpointId:
    Description: 'Your marbot endpoint ID (to get this value: select a Slack channel where marbot belongs to and send a message like this: "@marbot show me my endpoint id").'
    Type: String
  Stage:
    Description: 'marbot stage (never change this!).'
    Type: String
    Default: v1
    AllowedValues: [v1, dev]
  Test:
    Description: 'Send a single test alert.'
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  BillingThreshold:
    Description: 'Deprecated, use BudgetThreshold instead! Receive an alert, if your monthly AWS costs (in USD) are higher than this value (leave blank to disable, works in us-east-1 only).'
    Type: String
    Default: ''
    AllowedPattern: '^[0-9]*$'
  BudgetThreshold:
    Description: 'Receive an alert, if your monthly AWS costs (in USD) are higher than this value (leave blank to disable, works in us-east-1 only).'
    Type: String
    Default: '10'
    AllowedPattern: '^[0-9]*$'
  AMIUpdateNotificationECSOptimized:
    Description: 'Receive an alert, if a new ECS optimized AMI is released (works in us-east-1 only).'
    Type: String
    Default: false
    AllowedValues: [true, false]
  AMIUpdateNotificationAmazonLinux:
    Description: 'Receive an alert, if a new Amazon Linux AMI is released (works in us-east-1 only).'
    Type: String
    Default: false
    AllowedValues: [true, false]
  AMIUpdateNotificationAmazonLinux2:
    Description: 'Receive an alert, if a new Amazon Linux 2 AMI is released (works in us-east-1 only).'
    Type: String
    Default: true
    AllowedValues: [true, false]
  RootUserLogin:
    Description: 'Receive an alert, if a root user login is performed.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  CloudWatchAlarmFired:
    Description: 'Receive an alert, if any CloudWatch Alarm fires (state ALARM; instead of defining actions for each alarm).'
    Type: String
    Default: false
    AllowedValues: [true, false]
  CloudWatchAlarmOrphaned:
    Description: 'Receive an alert, if any CloudWatch Alarm does not receive any data (state INSUFFICIENT_DATA; instead of defining actions for each alarm).'
    Type: String
    Default: false
    AllowedValues: [true, false]
  CloudWatchAlarmAutoClose:
    Description: 'Auto-Close an alert, if any CloudWatch Alarm fires (state OK; instead of defining actions for each alarm).'
    Type: String
    Default: false
    AllowedValues: [true, false]
  BatchFailed:
    Description: 'Receive an alert, if any Batch job fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  CodePipelineFailed:
    Description: 'Receive an alert, if any CodePipeline execution fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  CodePipelineNotifications:
    Description: 'Receive a notification, if a CodePipeline stage succeedes.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  CodeBuildFailed:
    Description: 'Receive an alert, if any CodeBuild build fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  CodeDeployFailed:
    Description: 'Receive an alert, if any CodeDeploy deployment fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  HealthIssue:
    Description: 'Receive an alert, if AWS is experiencing events that may impact you.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  TrustedAdvisor:
    Description: 'Receive an alert, if any Trusted Advisor check turns red (works in us-east-1 only, requires AWS Business Support or higher).'
    Type: String
    Default: true
    AllowedValues: [true, false]
  AutoScalingFailed:
    Description: 'Receive an alert, if any EC2 instance fails to start or terminate in an Auto Scaling Group.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  GuardDutyFinding:
    Description: 'Receive an alert, if a GuardDuty finding is created.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  EMRFailed:
    Description: 'Receive an alert, if any EMR step or auto scaling policy fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  EBSFailed:
    Description: 'Receive an alert, if any EBS snapshot fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  SSMFailed:
    Description: 'Receive an alert, if any SSM maintenance window execution fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  RDSIssue:
    Description: 'Receive an alert, if any RDS issue is detected.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  GlueJobFailed:
    Description: 'Receive an alert, if any Glue job fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  EC2SpotInstanceInterruption:
    Description: 'Receive an alert, if any EC2 Spot instance is interrupted.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  ECSServiceFailed:
    Description: 'Receive an alert, if any ECS service fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  MacieAlert:
    Description: 'Receive an alert, if Macie fires an alert.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  SecurityHubFinding:
    Description: 'Receive an alert, if a SecurityHub finding is created.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  OpsWorksDeploymentFailed:
    Description: 'Receive an alert, if any OpsWorks deployment fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  OpsWorksCommandFailed:
    Description: 'Receive an alert, if any OpsWorks command fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  OpsWorksInstanceFailed:
    Description: 'Receive an alert, if any OpsWorks instance fails.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  OpsWorksAlert:
    Description: 'Receive an alert, if OpsWorks fires an alert.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  ECRIMageScanFinding:
    Description: 'Receive an alert, if a ECR Image Scan finding of severity MEDIUM, HIGH, or CRITICAL is created.'
    Type: String
    Default: true
    AllowedValues: [true, false]
  DLMPolicyAlert:
    Description: 'Receive an alert, if a DLM policy fires an alert.'
    Type: String
    Default: true
    AllowedValues: [true, false]
Conditions:
  NorthVirginia: !Equals [!Ref 'AWS::Region', 'us-east-1']
  TestEnabled: !Equals [!Ref Test, 'true']
  # Only available in us-east-1
  BillingEnabled: !And [!Condition NorthVirginia, !Not [!Equals [!Ref BillingThreshold, '']]]
  BudgetEnabled: !And [!Condition NorthVirginia, !Not [!Equals [!Ref BudgetThreshold, '']]]
  AMIUpdateNotificationECSOptimizedEnabled: !And [!Condition NorthVirginia, !Equals [!Ref AMIUpdateNotificationECSOptimized, 'true']]
  AMIUpdateNotificationAmazonLinuxEnabled: !And [!Condition NorthVirginia, !Equals [!Ref AMIUpdateNotificationAmazonLinux, 'true']]
  AMIUpdateNotificationAmazonLinux2Enabled: !And [!Condition NorthVirginia, !Equals [!Ref AMIUpdateNotificationAmazonLinux2, 'true']]
  TrustedAdvisorEnabled: !And [!Condition NorthVirginia, !Equals [!Ref TrustedAdvisor, 'true']]
  # Needs to be created in each region
  RootUserLoginEnabled: !Equals [!Ref RootUserLogin, 'true']
  CloudWatchAlarmFiredEnabled: !Equals [!Ref CloudWatchAlarmFired, 'true']
  CloudWatchAlarmOrphanedEnabled: !Equals [!Ref CloudWatchAlarmOrphaned, 'true']
  CloudWatchAlarmAutoCloseEnabled: !Equals [!Ref CloudWatchAlarmAutoClose, 'true']
  BatchFailedEnabled: !Equals [!Ref BatchFailed, 'true']
  CodePipelineFailedEnabled: !Equals [!Ref CodePipelineFailed, 'true']
  CodePipelineNotificationsEnabled: !Equals [!Ref CodePipelineNotifications, 'true']
  CodeBuildFailedEnabled: !Equals [!Ref CodeBuildFailed, 'true']
  CodeDeployFailedEnabled: !Equals [!Ref CodeDeployFailed, 'true']
  HealthIssueEnabled: !Equals [!Ref HealthIssue, 'true']
  AutoScalingFailedEnabled: !Equals [!Ref AutoScalingFailed, 'true']
  GuardDutyFindingEnabled: !Equals [!Ref GuardDutyFinding, 'true']
  EMRFailedEnabled: !Equals [!Ref EMRFailed, 'true']
  EBSFailedEnabled: !Equals [!Ref EBSFailed, 'true']
  SSMFailedEnabled: !Equals [!Ref SSMFailed, 'true']
  RDSIssueEnabled: !Equals [!Ref RDSIssue, 'true']
  GlueJobFailedEnabled: !Equals [!Ref GlueJobFailed, 'true']
  EC2SpotInstanceInterruptionEnabled: !Equals [!Ref EC2SpotInstanceInterruption, 'true']
  ECSServiceFailedEnabled: !Equals [!Ref ECSServiceFailed, 'true']
  MacieAlertEnabled: !Equals [!Ref MacieAlert, 'true']
  SecurityHubFindingEnabled: !Equals [!Ref SecurityHubFinding, 'true']
  OpsWorksDeploymentFailedEnabled: !Equals [!Ref OpsWorksDeploymentFailed, 'true']
  OpsWorksCommandFailedEnabled: !Equals [!Ref OpsWorksCommandFailed, 'true']
  OpsWorksInstanceFailedEnabled: !Equals [!Ref OpsWorksInstanceFailed, 'true']
  OpsWorksAlertEnabled: !Equals [!Ref OpsWorksAlert, 'true']
  ECRIMageScanFindingEnabled: !Equals [!Ref ECRIMageScanFinding, 'true']
  DLMPolicyAlertEnabled: !Equals [!Ref DLMPolicyAlert, 'true']
Resources:
  ##########################################################################
  #                                                                        #
  #                                 TOPIC                                  #
  #                                                                        #
  ##########################################################################
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service:
            - 'events.amazonaws.com' # Allow CloudWatch Events
            - 'budgets.amazonaws.com' # Allow Budget Notifications
            - 'rds.amazonaws.com' # Allow RDS Events
            - 's3.amazonaws.com' # Allow S3 Event Notifications
            - 'backup.amazonaws.com' # Allow Backup Events
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms, ElastiCache Notifications, Elastic Beanstalk Notifications, Auto Scaling Notification
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
        - Sid: Sid3
          Effect: Allow
          Principal:
            Service: 'ses.amazonaws.com' # Allow SES Notifications & Events
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:Referer': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic
  TopicEndpointSubscription:
    DependsOn: TopicPolicy
    Type: 'AWS::SNS::Subscription'
    Properties:
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 1
          maxDelayTarget: 60
          numRetries: 100
          numNoDelayRetries: 0
          backoffFunction: exponential
        throttlePolicy:
          maxReceivesPerSecond: 1
      Endpoint: !Sub 'https://api.marbot.io/${Stage}/endpoint/${EndpointId}'
      Protocol: https
      TopicArn: !Ref Topic
  MonitoringJumpStartEvent:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Monitoring Jump Start connection (created by marbot).'
      ScheduleExpression: 'rate(7 days)'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
        Input: !Sub |
          {
            "Type": "monitoring-jump-start-connection",
            "StackTemplate": "marbot",
            "StackVersion": "1.18.0",
            "Partition": "${AWS::Partition}",
            "AccountId": "${AWS::AccountId}",
            "Region": "${AWS::Region}",
            "StackId": "${AWS::StackId}",
            "StackName": "${AWS::StackName}"
          }
  ##########################################################################
  #                                                                        #
  #                                 ALARMS                                 #
  #                                                                        #
  ##########################################################################
  BillingAlarm:
    Condition: BillingEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Your monthly AWS costs are higher than expected (created by marbot).'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Currency
        Value: USD
      EvaluationPeriods: 1
      MetricName: EstimatedCharges
      Namespace: 'AWS/Billing'
      OKActions:
      - !Ref Topic
      Period: 21600
      Statistic: Maximum
      Threshold: !Ref BillingThreshold
  TrustedAdvisorCostOptimizationAlarm:
    Condition: TrustedAdvisorEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Trusted Advisor Cost Optimization checks are red (created by marbot).'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Category
        Value: 'Cost Optimization'
      EvaluationPeriods: 1
      MetricName: RedChecks
      Namespace: 'AWS/TrustedAdvisor'
      OKActions:
      - !Ref Topic
      Period: 21600
      Statistic: Maximum
      Threshold: 0
  TrustedAdvisorFaultToleranceAlarm:
    Condition: TrustedAdvisorEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Trusted Advisor Fault Tolerance checks are red (created by marbot).'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Category
        Value: 'Fault Tolerance'
      EvaluationPeriods: 1
      MetricName: RedChecks
      Namespace: 'AWS/TrustedAdvisor'
      OKActions:
      - !Ref Topic
      Period: 21600
      Statistic: Maximum
      Threshold: 0
  TrustedAdvisorPerformanceAlarm:
    Condition: TrustedAdvisorEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Trusted Advisor Performance checks are red (created by marbot).'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Category
        Value: 'Performance'
      EvaluationPeriods: 1
      MetricName: RedChecks
      Namespace: 'AWS/TrustedAdvisor'
      OKActions:
      - !Ref Topic
      Period: 21600
      Statistic: Maximum
      Threshold: 0
  TrustedAdvisorSecurityAlarm:
    Condition: TrustedAdvisorEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Trusted Advisor Security checks are red (created by marbot).'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Category
        Value: 'Security'
      EvaluationPeriods: 1
      MetricName: RedChecks
      Namespace: 'AWS/TrustedAdvisor'
      OKActions:
      - !Ref Topic
      Period: 21600
      Statistic: Maximum
      Threshold: 0
  TrustedAdvisorServiceLimitsAlarm:
    Condition: TrustedAdvisorEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Trusted Advisor Service Limits checks are red (created by marbot).'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Category
        Value: 'Service Limits'
      EvaluationPeriods: 1
      MetricName: RedChecks
      Namespace: 'AWS/TrustedAdvisor'
      OKActions:
      - !Ref Topic
      Period: 21600
      Statistic: Maximum
      Threshold: 0
  ##########################################################################
  #                                                                        #
  #                              SUBSCRIPTIONS                             #
  #                                                                        #
  ##########################################################################
  AMIUpdateNotificationECSOptimizedSubscription:
    Condition: AMIUpdateNotificationECSOptimizedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::SNS::Subscription'
    Properties:
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 1
          maxDelayTarget: 60
          numRetries: 100
          numNoDelayRetries: 0
          backoffFunction: exponential
        throttlePolicy:
          maxReceivesPerSecond: 1
      Endpoint: !Sub 'https://api.marbot.io/${Stage}/endpoint/${EndpointId}'
      Protocol: https
      TopicArn: 'arn:aws:sns:us-east-1:177427601217:ecs-optimized-amazon-ami-update'
  AMIUpdateNotificationAmazonLinuxSubscription:
    Condition: AMIUpdateNotificationAmazonLinuxEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::SNS::Subscription'
    Properties:
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 1
          maxDelayTarget: 60
          numRetries: 100
          numNoDelayRetries: 0
          backoffFunction: exponential
        throttlePolicy:
          maxReceivesPerSecond: 1
      Endpoint: !Sub 'https://api.marbot.io/${Stage}/endpoint/${EndpointId}'
      Protocol: https
      TopicArn: 'arn:aws:sns:us-east-1:137112412989:amazon-linux-ami-updates'
  AMIUpdateNotificationAmazonLinux2Subscription:
    Condition: AMIUpdateNotificationAmazonLinux2Enabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::SNS::Subscription'
    Properties:
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 1
          maxDelayTarget: 60
          numRetries: 100
          numNoDelayRetries: 0
          backoffFunction: exponential
        throttlePolicy:
          maxReceivesPerSecond: 1
      Endpoint: !Sub 'https://api.marbot.io/${Stage}/endpoint/${EndpointId}'
      Protocol: https
      TopicArn: 'arn:aws:sns:us-east-1:137112412989:amazon-linux-2-ami-updates'
  ##########################################################################
  #                                                                        #
  #                                 BUDGET                                 #
  #                                                                        #
  ##########################################################################
  Budget:
    Condition: BudgetEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Budgets::Budget'
    Properties:
      NotificationsWithSubscribers:
      - Subscribers:
        - SubscriptionType: SNS
          Address: !Ref Topic
        Notification:
          ComparisonOperator: 'GREATER_THAN'
          NotificationType: ACTUAL
          Threshold: 100
          ThresholdType: PERCENTAGE
      - Subscribers:
        - SubscriptionType: SNS
          Address: !Ref Topic
        Notification:
          ComparisonOperator: 'GREATER_THAN'
          NotificationType: FORECASTED
          Threshold: 100
          ThresholdType: PERCENTAGE
      Budget:
        BudgetLimit:
          Amount: !Ref BudgetThreshold
          Unit: USD
        TimeUnit: MONTHLY
        CostFilters:
          LinkedAccount: [!Ref 'AWS::AccountId']
        CostTypes:
          IncludeSupport: false
          IncludeOtherSubscription: false
          IncludeTax: false
          IncludeSubscription: true
          IncludeUpfront: false
          IncludeDiscount: true
          IncludeCredit: false
          IncludeRecurring: false
          UseAmortized: false
          IncludeRefund: false
        BudgetType: COST
  ##########################################################################
  #                                                                        #
  #                                 EVENTS                                 #
  #                                                                        #
  ##########################################################################
  RootUserLoginEvent:
    Condition: RootUserLoginEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A root user login was detected, better use IAM users instead (created by marbot).'
      EventPattern:
        'detail-type':
        - 'AWS Console Sign In via CloudTrail'
        detail:
          userIdentity:
            arn:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  CloudWatchAlarmFiredEvent:
    Condition: CloudWatchAlarmFiredEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A CloudWatch Alarm fired (created by marbot).'
      EventPattern:
        source:
        - 'aws.cloudwatch'
        'detail-type':
        - 'CloudWatch Alarm State Change'
        detail:
          state:
            value:
            - ALARM
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  CloudWatchAlarmOrphanedEvent:
    Condition: CloudWatchAlarmOrphanedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A CloudWatch Alarm orphaned (created by marbot).'
      EventPattern:
        source:
        - 'aws.cloudwatch'
        'detail-type':
        - 'CloudWatch Alarm State Change'
        detail:
          state:
            value:
            - INSUFFICIENT_DATA
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  CloudWatchAlarmAutoCloseEvent:
    Condition: CloudWatchAlarmAutoCloseEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A CloudWatch Alarm could be auto-closed (created by marbot).'
      EventPattern:
        source:
        - 'aws.cloudwatch'
        'detail-type':
        - 'CloudWatch Alarm State Change'
        detail:
          state:
            value:
            - OK
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  BatchFailedEvent:
    Condition: BatchFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A Batch job failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.batch'
        'detail-type':
        - 'Batch Job State Change'
        detail:
          status:
          - FAILED
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  CodePipelineFailedEvent:
    Condition: CodePipelineFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A CodePipeline execution failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.codepipeline'
        'detail-type':
        - 'CodePipeline Pipeline Execution State Change'
        detail:
          state:
          - FAILED
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  CodePipelineNotificationsEvent:
    Condition: CodePipelineNotificationsEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'CodePipeline notifications (created by marbot).'
      EventPattern:
        source:
        - 'aws.codepipeline'
        'detail-type':
        - 'CodePipeline Stage Execution State Change'
        detail:
          state:
          - SUCCEEDED
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  CodeBuildFailedEvent:
    Condition: CodeBuildFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A CodeBuild build failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.codebuild'
        'detail-type':
        - 'CodeBuild Build State Change'
        detail:
          'build-status':
          - FAILED
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  CodeDeployFailedEvent:
    Condition: CodeDeployFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A CodeDeploy deployment or instance failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.codedeploy'
        'detail-type':
        - 'CodeDeploy Deployment State-change Notification'
        - 'CodeDeploy Instance State-change Notification'
        detail:
          state:
          - FAILURE
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  HealthIssueEvent:
    Condition: HealthIssueEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'AWS is experiencing events that may impact you (created by marbot).'
      EventPattern:
        source:
        - 'aws.health'
        'detail-type':
        - 'AWS Health Event'
        detail:
          'eventTypeCategory':
          - issue
          - scheduledChange
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  AutoScalingFailedEvent:
    Condition: AutoScalingFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'EC2 Instances controlled by an Auto Scaling Group failed to launch or terminate (created by marbot).'
      EventPattern:
        source:
        - 'aws.autoscaling'
        'detail-type':
        - 'EC2 Instance Launch Unsuccessful'
        - 'EC2 Instance Terminate Unsuccessful'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  GuardDutyFindingEvent:
    Condition: GuardDutyFindingEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Events (e.g., findings) from AWS GuardDuty (created by marbot).'
      EventPattern:
        source:
        - 'aws.guardduty'
        'detail-type':
        - 'GuardDuty Finding'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  EMRFailedEvent:
    Condition: EMRFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'EMR step or auto scaling policy failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.emr'
        'detail-type':
        - 'EMR Auto Scaling Policy State Change'
        - 'EMR Step Status Change'
        detail:
          state:
          - FAILED
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  EBSFailedEvent:
    Condition: EBSFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'EBS snapshot failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.ec2'
        'detail-type':
        - 'EBS Snapshot Notification'
        - 'EBS Multi-Volume Snapshots Completion Status'
        detail:
          result:
          - failed
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  SSMFailedEnabled:
    Condition: SSMFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'SSM maintenance window execution failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.ssm'
        'detail-type':
        - 'Maintenance Window Execution State-change Notification'
        detail:
          status:
          - FAILED
          - TIMED_OUT
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  RDSInstanceIssue:
    Condition: RDSIssueEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::RDS::EventSubscription'
    Properties:
      SnsTopicArn: !Ref Topic
      SourceType: 'db-instance'
  RDSClusterIssue:
    Condition: RDSIssueEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::RDS::EventSubscription'
    Properties:
      SnsTopicArn: !Ref Topic
      SourceType: 'db-cluster'
  GlueJobFailedEvent:
    Condition: GlueJobFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Glue job failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.glue'
        'detail-type':
        - 'Glue Job State Change'
        detail:
          'state':
          - FAILED
          - TIMEOUT
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  EC2SpotInstanceInterruptionEvent:
    Condition: EC2SpotInstanceInterruptionEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'EC2 Spot Instance interrupted (created by marbot).'
      EventPattern:
        source:
        - 'aws.ec2'
        'detail-type':
        - 'EC2 Spot Instance Interruption Warning'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  ECSServiceFailedEvent:
    Condition: ECSServiceFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'ECS Service failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.ec2'
        'detail-type':
        - 'ECS Service Action'
        detail:
          eventType:
          - ERROR
          - WARN
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  MacieAlertEvent:
    Condition: MacieAlertEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Alerts from AWS Macie (created by marbot).'
      EventPattern:
        source:
        - 'aws.macie'
        'detail-type':
        - 'Macie Alert'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  SecurityHubFindingEvent:
    Condition: SecurityHubFindingEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Events (e.g., findings) from AWS SecurityHub (created by marbot).'
      EventPattern:
        source:
        - 'aws.securityhub'
        'detail-type':
        - 'Security Hub Findings - Imported'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  OpsWorksDeploymentFailedEvent:
    Condition: OpsWorksDeploymentFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A OpsWorks deployment failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.opsworks'
        'detail-type':
        - 'OpsWorks Deployment State Change'
        detail:
          status:
          - failed
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  OpsWorksCommandFailedEvent:
    Condition: OpsWorksCommandFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A OpsWorks command failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.opsworks'
        'detail-type':
        - 'OpsWorks Command State Change'
        detail:
          status:
          - failed
          - expired
          - skipped
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  OpsWorksInstanceFailedEvent:
    Condition: OpsWorksInstanceFailedEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'A OpsWorks instance failed (created by marbot).'
      EventPattern:
        source:
        - 'aws.opsworks'
        'detail-type':
        - 'OpsWorks Instance State Change'
        detail:
          status:
          - 'connection_lost'
          - 'setup_failed'
          - 'start_failed'
          - 'stop_failed'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  OpsWorksAlertEvent:
    Condition: OpsWorksAlertEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Alerts from AWS OpsWorks (created by marbot).'
      EventPattern:
        source:
        - 'aws.opsworks'
        'detail-type':
        - 'OpsWorks Alert'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  ECRIMageScanFindingEvent:
    Condition: ECRIMageScanFindingEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Findings from AWS ECR Image Scans (created by marbot).'
      EventPattern: # a pattern that filters on severity is not possible https://github.com/aws/containers-roadmap/issues/565
        source:
        - 'aws.ecr'
        'detail-type':
        - 'ECR Image Scan'
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  DLMPolicyAlertEvent:
    Condition: DLMPolicyAlertEnabled
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Alerts from Amazon Data Lifecycle Manager (created by marbot).'
      EventPattern:
        source:
        - 'aws.dlm'
        'detail-type':
        - 'DLM Policy State Change'
        detail:
          state:
          - ERROR
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: marbot
  ##########################################################################
  #                                                                        #
  #                                  TEST                                  #
  #                                                                        #
  ##########################################################################
  TestAlert:
    Condition: TestEnabled
    Type: 'Custom::Test'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'TestAlertFunction.Arn'
      EndpointId: !Ref EndpointId
      Stage: !Ref Stage
      AccountId: !Ref 'AWS::AccountId'
      Region: !Ref 'AWS::Region'
  TestAlertFunctionLogGroup:
    Condition: TestEnabled
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}'
      RetentionInDays: 14
  TestAlertFunction: # needs no monitoring because it is used as a custom resource
    Condition: TestEnabled
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const https = require('https');
          const querystring = require('querystring');
          const response = require('./cfn-response');
          exports.handler = (event, context, cb) => {
            console.log(JSON.stringify(event));
            if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              const alert = {
                AccountId: event.ResourceProperties.AccountId,
                Region: event.ResourceProperties.Region,
                Message: 'Test alert'
              };
              const req = https.request({
                hostname: 'api.marbot.io',
                path: `/${event.ResourceProperties.Stage}/endpoint/${event.ResourceProperties.EndpointId}?${querystring.stringify(alert)}`,
                method: 'GET'
              }, (res) => {
                res.on('data', () => {});
                res.on('end', () => {
                  if (res.statusCode === 204) {
                    response.send(event, context, response.SUCCESS, {});
                  } else {
                    console.log(`unexpected status code ${res.statusCode}`);
                    response.send(event, context, response.FAILED, {});
                  }
                });
              });
              req.on('error', (e) => {
                console.log(JSON.stringify(err));
                response.send(event, context, response.FAILED, {});
              });
              req.end();
            } else {
              response.send(event, context, response.SUCCESS, {});
            }
          };
      FunctionName: !Ref 'AWS::StackName'
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'TestAlertFunctionRole.Arn'
      Runtime: 'nodejs10.x'
      Timeout: 30
  TestAlertFunctionRole:
    Condition: TestEnabled
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'lambda'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'TestAlertFunctionLogGroup.Arn'
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  StackTemplate:
    Description: 'Stack template.'
    Value: 'marbot'
  StackVersion:
    Description: 'Stack version.'
    Value: '1.18.0'
  TopicName:
    Description: 'The name of the SNS topic.'
    Value: !GetAtt 'Topic.TopicName'
    Export:
      Name: !Sub '${AWS::StackName}-TopicName'
  TopicArn:
    Description: 'The ARN of the SNS topic.'
    Value: !Ref Topic
    Export:
      Name: !Sub '${AWS::StackName}-TopicArn'
